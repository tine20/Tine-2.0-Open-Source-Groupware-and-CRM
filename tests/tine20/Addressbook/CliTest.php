<?php
/**
 * Tine 2.0 - http://www.tine20.org
 * 
 * @package     Addressbook
 * @license     http://www.gnu.org/licenses/agpl.html
 * @copyright   Copyright (c) 2010-2014 Metaways Infosystems GmbH (http://www.metaways.de)
 * @author      Philipp SchÃ¼le <p.schuele@metaways.de>
 */

/**
 * Test class for Addressbook_Frontend_Cli
 */
class Addressbook_CliTest extends TestCase
{
    /**
     * Backend
     *
     * @var Addressbook_Frontend_Cli
     */
    protected $_cli;
    
    /**
     * @var Tinebase_Model_Container
     */
    protected $_container = null;
    
    /**
     * Sets up the fixture.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
        parent::setUp();
        
        $this->_cli = new Addressbook_Frontend_Cli();
        $this->_container = $this->_getTestContainer('Addressbook');
    }
    
    /**
     * test to set container grants
     */
    public function testSetContainerGrants()
    {
        $this->markTestSkipped('FIXME: 0010343: fix some CLI tests');
        
        $out = $this->_cliHelper(array(
            'containerId=' . $this->_container->getId(), 
            'accountId=' . Tinebase_Core::getUser()->getId(), 
            'grants=privateGrant'
        ));
        
        $grants = Tinebase_Container::getInstance()->getGrantsOfContainer($this->_container);
        $this->assertTrue(($grants->getFirstRecord()->privateGrant == 1));
    }

    /**
     * test to set container grants with filter and overwrite old grants
     */
    public function testSetContainerGrantsWithFilterAndOverwrite()
    {
        $this->markTestSkipped('FIXME: 0010343: fix some CLI tests');
        
        $nameFilter = $this->_container->name;
        $filter = new Tinebase_Model_ContainerFilter(array(
            array('field' => 'application_id', 'operator' => 'equals', 
                'value' => Tinebase_Application::getInstance()->getApplicationByName('Addressbook')->getId()),
            array('field' => 'name', 'operator' => 'contains', 'value' => $nameFilter),
        ));
        $count = Tinebase_Container::getInstance()->searchCount($filter);
        
        $out = $this->_cliHelper(array(
            'namefilter="' . $nameFilter . '"', 
            'accountId=' . Tinebase_Core::getUser()->getId(), 
            'grants=privateGrant,adminGrant',
            'overwrite=1'
        ), $count);
        
        $grants = Tinebase_Container::getInstance()->getGrantsOfContainer($this->_container);
        $this->assertTrue(($grants->getFirstRecord()->privateGrant == 1));
        $this->assertTrue(($grants->getFirstRecord()->adminGrant == 1));
    }
    
    /**
     * call setContainerGrants cli function with params
     * 
     * @param array $_params
     * @return string
     */
    protected function _cliHelper($_params, $_numberExpected = 1)
    {
        $opts = new Zend_Console_Getopt('abp:');
        $opts->setArguments($_params);
        
        ob_start();
        $this->_cli->setContainerGrants($opts);
        $out = ob_get_clean();
        
        $this->assertContains("Updated $_numberExpected container(s)", $out,
                'Text not found in: ' . $out . '(current user: ' . Tinebase_Core::getUser()->accountLoginName . ')');
        
        return $out;
    }
    
    /**
     * testRemoveAutogeneratedContacts
     * 
     * @see 0010257: add cli function for deleting autogenerated contacts
     */
    public function testRemoveAutogeneratedContacts()
    {
        if (! Tinebase_Application::getInstance()->isInstalled('Calendar')) {
            $this->markTestSkipped('only works with Calendar app');
        }
        
        $attenderEmail = 'test@external.org';
        $attenderData = array(
            'email' => $attenderEmail
        );
        Calendar_Model_Attender::resolveEmailToContact($attenderData);

        Tinebase_TransactionManager::getInstance()->commitTransaction($this->_transactionId);
        $this->_transactionId = Tinebase_TransactionManager::getInstance()->startTransaction(Tinebase_Core::getDb());
        
        $opts = new Zend_Console_Getopt('abp:');
        $opts->setArguments(array());
        $this->_cli->removeAutogeneratedContacts($opts);
        
        $filter = new Addressbook_Model_ContactFilter(array(
            array('field' => 'email', 'operator' => 'equals', 'value' => $attenderEmail)
        ));
        $result = Addressbook_Controller_Contact::getInstance()->search($filter);
        $this->assertEquals(0, count($result), 'should not find autogenerated contact any more: ' . print_r($result->toArray(), true));
    }

    /**
     * @group longrunning
     */
    public function testUpdateGeodata()
    {
        // create contact without geodata
        $contact = Addressbook_Controller_Contact::getInstance()->create(new Addressbook_Model_Contact(array(
            'n_family'          => 'PHPUNIT',
            'container_id'      => $this->_container->id,
            'adr_one_street'    => 'Pickhuben 2',
            'adr_one_locality'  => 'Hamburg',
        )));
        self::assertTrue(! isset($contact->adr_one_lon), 'no geodata should be in contact: ' . print_r($contact->toArray(), true));

        $opts = new Zend_Console_Getopt('abp:');
        $opts->setArguments(array(
            'containerId=' . $this->_container->getId(),
        ));
        ob_start();
        $this->_cli->updateContactGeodata($opts);
        $out = ob_get_clean();

        // check geodata in contact
        $updatedContact = Addressbook_Controller_Contact::getInstance()->get($contact->getId());
        self::assertTrue(isset($updatedContact->adr_one_lon), 'no geodata in contact: ' . print_r($updatedContact->toArray(), true));
        self::assertEquals('Updated 1 Record(s)', $out);
    }
}
